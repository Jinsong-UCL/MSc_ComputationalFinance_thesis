#include <iostream>
#include <vector>
#include "EuropeanOption.h"
#include "Calibration.h"

template < class T >
inline std::ostream& operator << (std::ostream& os, const std::vector<T>& v)
{
    os << "[";
    for (auto ii = v.begin(); ii != v.end(); ++ii)
    {
        os << " " << *ii;
    }
    os << " ]";
    return os;
}



int main() 
{
    double r = 0.02, theta = 0.1, kappa = 3.0, sigma = 0.25, rho = -0.8, v0 = 0.08, S0 = 1.0;
    double marketParameters[] = {v0, theta, rho, kappa, sigma};
    // int nParameters = 5;
    std::vector<double> SPX_strikes = {
            0.9371, 0.8603, 0.8112, 0.7760, 0.7470, 0.7216, 0.6699, 0.6137,
            0.9956, 0.9868, 0.9728, 0.9588, 0.9464, 0.9358, 0.9175, 0.9025,
            1.0427, 1.0463, 1.0499, 1.0530, 1.0562, 1.0593, 1.0663, 1.0766,
            1.2287, 1.2399, 1.2485, 1.2659, 1.2646, 1.2715, 1.2859, 1.3046,
            1.3939, 1.4102, 1.4291, 1.4456, 1.4603, 1.4736, 1.5005, 1.5328};

    std::vector<double> SPX_maturities = {
            0.119047619047619,  0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
            0.119047619047619,  0.238095238095238,  0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714	,1.07142857142857, 1.42857142857143	,
            0.119047619047619, 	0.238095238095238,	0.357142857142857,	0.476190476190476,	0.595238095238095,	0.714285714285714,	1.07142857142857,	1.42857142857143,
            0.119047619047619,	0.238095238095238,	0.357142857142857,	0.476190476190476	,0.595238095238095,	0.714285714285714,	1.07142857142857,	1.42857142857143,
            0.119047619047619,	0.238095238095238,	0.357142857142857,	0.476190476190476,	0.595238095238095,	0.714285714285714,	1.07142857142857,	1.42857142857143};

    std::vector<double> VIX_strikes = { // are they strikes or log-strikes??
            0.07660333466800909, 0.07823036262505452, 0.08007866879151475,
            0.08197064388101638, 0.08371167160297435, 0.07528231789011931,
            0.07755350918528185, 0.08015741494276396, 0.08284874840358378,
            0.0853482112450969,  0.07430112345712658, 0.077055734551228,
            0.08023623852982013, 0.08354801898792094, 0.08664544590808211,
            0.0732872469748735,  0.07654634796281677, 0.08033769704753065,
            0.08431683207193616, 0.08806642128491488, 0.07084911309063555,
            0.07534553012964565, 0.08067681958626018, 0.08638533974549638,
            0.0918677586016848,  0.06910110193769552, 0.07450988995253548,
            0.08101737363349071, 0.08809320258894406, 0.0949885695945464};

    std::vector<double> VIX_maturities = {
            0.01917808, 0.01917808, 0.01917808, 0.01917808, 0.01917808, 0.03835616,
            0.03835616, 0.03835616, 0.03835616, 0.03835616, 0.05753425, 0.05753425,
            0.05753425, 0.05753425, 0.05753425, 0.08219178, 0.08219178, 0.08219178,
            0.08219178, 0.08219178, 0.16438356, 0.16438356, 0.16438356, 0.16438356,
            0.16438356, 0.24657534, 0.24657534, 0.24657534, 0.24657534, 0.24657534};

    Calibration calibration(SPX_strikes, SPX_maturities, VIX_strikes, VIX_maturities,
                            marketParameters, r, S0);

    // analytical gradient:
    calibrate(calibration);
    // numerical gradient:
    calibrate(calibration, "Numerical");

//    auto VIX_prices = calibration.VIX_Prices();
//
//    Calibration calibration1(SPX_strikes, SPX_maturities, marketParameters, r, S0);
//    calibrate(calibration1);
//    auto SPX_prices = calibration.SPX_Prices();

    return 0;
}